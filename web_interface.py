import streamlit as st
import json
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from query_rag import QualityControlledRAG, VECTOR_STORE, LLM
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    st.stop()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RAG Quality Control System",
    page_icon="ü§ñ",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'quality_rag' not in st.session_state:
    st.session_state.quality_rag = QualityControlledRAG(
        vector_store=VECTOR_STORE,
        llm=LLM,
        quality_threshold=0.9,
        max_iterations=3,
        enable_monitoring=True
    )

if 'query_history' not in st.session_state:
    st.session_state.query_history = []

def main():
    st.title("ü§ñ RAG —Å–∏—Å—Ç–µ–º–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞")
    st.markdown("–°–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–∞")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        quality_threshold = st.slider(
            "–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞", 
            min_value=0.5, 
            max_value=1.0, 
            value=0.9, 
            step=0.05
        )
        
        max_iterations = st.slider(
            "–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π", 
            min_value=1, 
            max_value=5, 
            value=3
        )
        
        verbose_mode = st.checkbox("–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥", value=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        st.session_state.quality_rag.quality_threshold = quality_threshold
        st.session_state.quality_rag.max_iterations = max_iterations
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"):
            st.session_state.quality_rag.reset_metrics()
            st.session_state.query_history = []
            st.success("–ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
            st.rerun()
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"):
            if st.session_state.quality_rag.enable_monitoring:
                st.session_state.quality_rag.monitor.save_metrics()
                st.success("–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        example_questions = [
            "—á—Ç–æ —Ç–∞–∫–æ–µ –£–¶?",
            "–∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏?",
            "—á—Ç–æ —Ç–∞–∫–æ–µ –°–ö–ó–ò?",
            "–∫–∞–∫–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π?",
            "—á—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å?"
        ]
        
        selected_example = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:",
            [""] + example_questions
        )
        
        user_question = st.text_area(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å:",
            value=selected_example if selected_example else "",
            height=100,
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∞—Ö..."
        )
        
        if st.button("üöÄ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", type="primary"):
            if user_question.strip():
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                    result = st.session_state.quality_rag.get_answer_with_quality_control(
                        user_question, 
                        verbose=verbose_mode
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏
                    st.session_state.query_history.append(result)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                display_result(result, verbose_mode)
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
    
    with col2:
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        display_metrics()
    
    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    if st.session_state.query_history:
        st.header("üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
        display_query_history()
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    if st.session_state.quality_rag.enable_monitoring:
        metrics = st.session_state.quality_rag.monitor.metrics
        if metrics['total_queries'] > 0:
            st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
            display_analytics()

def display_result(result, verbose_mode):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    st.markdown("---")
    st.header("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        score_color = "üü¢" if result['final_score'] >= 0.9 else "üü°" if result['final_score'] >= 0.7 else "üî¥"
        st.metric(
            "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞",
            f"{result['final_score']:.2f}",
            delta=score_color
        )
    
    with col2:
        st.metric("–ò—Ç–µ—Ä–∞—Ü–∏–π", result['iterations'])
    
    with col3:
        if 'response_time' in result:
            st.metric("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{result['response_time']:.2f}—Å")
    
    with col4:
        status = "‚úÖ –ü—Ä–∏–Ω—è—Ç" if result['quality_acceptable'] else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
        st.metric("–°—Ç–∞—Ç—É—Å", status)
    
    # –û—Ç–≤–µ—Ç
    st.subheader("üí° –û—Ç–≤–µ—Ç:")
    st.markdown(result['final_answer'])
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if verbose_mode:
        with st.expander("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.json(result['verification_history'])

def display_metrics():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫"""
    if not st.session_state.quality_rag.enable_monitoring:
        st.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
        return
    
    metrics = st.session_state.quality_rag.monitor.metrics
    
    if metrics['total_queries'] == 0:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    success_rate = metrics['successful_queries'] / metrics['total_queries']
    
    st.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", metrics['total_queries'])
    st.metric("Success Rate", f"{success_rate:.1%}")
    st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{metrics['average_quality_score']:.2f}")
    st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{metrics['average_response_time']:.1f}—Å")

def display_query_history():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    for i, result in enumerate(reversed(st.session_state.query_history[-5:]), 1):
        with st.expander(f"–ó–∞–ø—Ä–æ—Å {len(st.session_state.query_history) - i + 1}: {result['question'][:50]}..."):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.markdown(f"**–û—Ç–≤–µ—Ç:** {result['final_answer'][:200]}...")
            
            with col2:
                st.metric("–û—Ü–µ–Ω–∫–∞", f"{result['final_score']:.2f}")
                st.metric("–ò—Ç–µ—Ä–∞—Ü–∏–∏", result['iterations'])

def display_analytics():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    metrics = st.session_state.quality_rag.monitor.metrics
    
    col1, col2 = st.columns(2)
    
    with col1:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
        st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞")
        quality_data = metrics['quality_distribution']
        
        if sum(quality_data.values()) > 0:
            df_quality = pd.DataFrame([
                {'–î–∏–∞–ø–∞–∑–æ–Ω': k, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': v} 
                for k, v in quality_data.items() if v > 0
            ])
            
            fig_pie = px.pie(
                df_quality, 
                values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 
                names='–î–∏–∞–ø–∞–∑–æ–Ω',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if len(metrics['query_history']) > 1:
            st.subheader("üìà –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            df_history = pd.DataFrame([
                {
                    'timestamp': datetime.fromisoformat(q['timestamp']),
                    'score': q['final_score'],
                    'question': q['question'][:30] + "..."
                }
                for q in metrics['query_history']
            ])
            
            fig_line = px.line(
                df_history, 
                x='timestamp', 
                y='score',
                title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤",
                hover_data=['question']
            )
            fig_line.add_hline(y=0.9, line_dash="dash", line_color="red")
            st.plotly_chart(fig_line, use_container_width=True)
    
    # –¢–æ–ø —É–ª—É—á—à–µ–Ω–∏–π
    if metrics['improvement_types']:
        st.subheader("üîß –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        top_improvements = dict(sorted(
            metrics['improvement_types'].items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:5])
        
        df_improvements = pd.DataFrame([
            {'–ü—Ä–æ–±–ª–µ–º–∞': k, '–ß–∞—Å—Ç–æ—Ç–∞': v} 
            for k, v in top_improvements.items()
        ])
        
        fig_bar = px.bar(
            df_improvements, 
            x='–ß–∞—Å—Ç–æ—Ç–∞', 
            y='–ü—Ä–æ–±–ª–µ–º–∞',
            orientation='h',
            title="–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
        )
        st.plotly_chart(fig_bar, use_container_width=True)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    performance_report = st.session_state.quality_rag.get_performance_report()
    if performance_report.get('recommendations'):
        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
        for rec in performance_report['recommendations']:
            st.info(rec)

if __name__ == "__main__":
    main()
